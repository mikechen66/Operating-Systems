Listing 8-9: The SWI handler from iOS 5.0 and 5.1, iPod4,1 kernel

0x80079120 _fleh_swi    
  text:80079120   CMN     R12, #3
__text:80079124   BEQ     loc_80079344  ; Branches off to ml_get_timebase if R12==3
;
; Largely irrelevant ARM Assembly omitted for brevity
; jumps to another section of the function which handles Machine Dependent calls
; 
; What is relevant: R11 holds the system call number
;
__text:80079184   BLX     get_BSD_proc_and_thread_and_do_kauth 
 ;
 ; Set R9 to the privileged only Thread and Process ID Register
 ; We need this for UNIX system calls, later
 ;
__text:80079188   MRC     p15, 0, R9,c13,c0, 4 
 ;
 ; Remember that Mach calls are negative. The following separates Mach from UNIX
 ;
__text:8007918C   RSBS    R5, R11, #0 ; Reverse substract with carry
__text:80079190   BLE     _is_unix
 ;
 ; Fall through on Mach. This is what in Intel would be a call to mach_munger
 ; but on ARM just directly gets the Mach trap
 ;
 ; KERNEL_DEBUG_CONSTANT(MACHDBG_CODE(DBG_MACH_EXCP_SC,
 ; (call_number)) | DBG_FUNC_START);
 ;
__text:80079194   LDR     R4, =_kdebug_enable ; recall kdebug was discussed in Ch. 5
__text:80079198   LDR     R4, [R4]
__text:8007919C   MOVS    R4, R4  ; test kdebug_enable
__text:800791A0   MOVNE   R0, R8
__text:800791A4   MOVNE   R1, R5
__text:800791A8   BLNE    __kernel_debug_mach_func_entry
__text:800791AC   ADR     LR, _return_from_swi   ; Set our return on error
   ;
   ; Increment Mach trap count (at offset 0x1B4 of thread structure)
   ;
__text:800791B0   LDR    R2, [R10,#0x1B4] ; get Mach trap count
__text:800791B4   CMP    R5, #128         ; Compare Mach trap to MACH_TRAP_TABLE_COUNT
__text:800791B8   ADD    R2, R2, #1       ; increment Mach trap count
__text:800791BC   STR    R2, [R10,#0x1B4] ; and store
__text:800791C0   BGE    do_arm_exception ; if syscall number > MACH_TRAP_TABLE_COUNT...
   ;
   ; If we are here, R5 holds the Mach trap number – dereference from mach_trap_table:
   ; R1 = mach_trap_table[call_number].mach_trap_function
   ;
__text:800791C4   LDR    R1, =_mach_trap_table
__text:800791C8   ADD    R1, R1, R5,LSL#3  ; R1 = R1 + call_num * sizeof(mach_trap_t)
__text:800791CC   LDR    R1, [R1,#4]       ; +4, skip over arg_count
   ;
   ; if (mach_call == (mach_call_t)kern_invalid)
   ;
__text:800791D0   LDR    R2, =(_kern_invalid+1)
__text:800791D4   MOV    R0, R8
__text:800791D8   TEQ    R1, R2   
__text:800791DC   BEQ    do_arm_exception
   ;
   ; else just call trap from R1
   ;
__text:800791E0   BX      R1      ;  Do Mach trap (jump to table pointer)
   ; returning from trap
__text:800791E4   STR     R1, [R8,#4]
return_from_swi
__text:800791E8   STR     R0, [R8]
__text:800791EC   MOVS    R4, R4
__text:800791F0   MOVNE   R1, R5
 ;
 ; KERNEL_DEBUG_CONSTANT(MACHDBG_CODE(DBG_MACH_EXCP_SC, (call_number)) | DBG_FUNC_END);
 ; 
__text:800791F4   BLNE    __kernel_debug_mach_func_exit
 ;
 ; iOS's load_and_go_user is like OS X's thread_exception_return();
 ;
__text:800791F8   BL      __load_and_go_user
__text:800791FC   B       loc_800791FC       ; HANG ENDLESSLY – Not Reached
 ;
 ; arm_exception(EXC_SYSCALL,call_number, 1);
 ;
do_arm_exception:  ; Generates a Mach exception (discussed in Chapter 10)
__text:80079200   MOV     R0, #EXC_SYSCALL
__text:80079204   SUB     R1, SP, #4
__text:80079208   MOV     R2, #1
__text:8007920C   BLX     _exception_triage  ; as i386_exception, direct fall through
__text:80079210   B       loc_80079210       ; HANG ENDLESSLY – Not reached
 ;
 ; For UNIX System calls:
 ;
_is_unix
 ;
 ; Increment UNIX system call count for this thread
 ; (at offset 0x1B8 of thread structure)
 ;
__text:80079220   LDR     R1, [R10,#0x1B8]
__text:80079224   MOV     R0, R8           ; out of order: 1st argument of unix_syscall
__text:80079228   ADD     R1, R1, #1        
__text:8007922C   STR     R1, [R10,#0x1B8]
 ;
 ;
 ;
__text:80079230   MOV     R1, R9           ; 2nd argument of unix_syscall
__text:80079234   LDR     R2, [R9,#0x5BC]  ; 3rd argument of unix_syscall
__text:80079238   LDR     R3, [R10,#0x1EC] ; 4th argument of unix_syscall
 ;
 ; Call _unix_syscall
 ;
__text:8007923C   BL      _unix_syscall
__text:80079240   B    loc_80079240          ; HANG ENDLESSLY – Not reached
